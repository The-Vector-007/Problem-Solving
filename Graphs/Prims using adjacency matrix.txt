#include<bits/stdc++.h>
using namespace std;

struct Edge{
    int source;
    int destination;
    int distance;
};

bool isValidEdge( int source, int destination, vector<bool> inMst ){
    if( source == destination )
        return false;
    else if( inMst[source] == false && inMst[destination] == false )
        return false;
    else if( inMst[source] == true && inMst[destination] == true )
        return false;
    return true;
}

void PrimsMst( vector<vector<int>> distance, int vertices ){
    int mindistance = 0;
    vector<bool> inMst(vertices, false);
    inMst[0] = true;
    Edge output[vertices - 1];

    int count = 0;
    while( count < vertices - 1 ){
        int min = INT_MAX, sourceEdge = -1, destEdge = -1;

        for( int i = 0; i < vertices; i++ ){
            for( int j = 0; j < vertices; j++ ){
                if( distance[i][j] < min ){
                    if( isValidEdge(i, j, inMst) ){
                        min = distance[i][j];
                        sourceEdge = i;
                        destEdge = j;
                    }
                }
            }
        }

        if( sourceEdge != -1 && destEdge != -1 ){
            output[count].source = sourceEdge;
            output[count].destination = destEdge;
            output[count].distance = min;

            inMst[destEdge] = inMst[sourceEdge] = true;
            mindistance += min;
            count++;
        }
    }

    for( int i = 0; i < vertices - 1; i++ ){
        cout<<output[i].source<<" "<<output[i].destination<<" "<<output[i].distance<<endl;
    }

    cout<<"Minimum Distance: "<<mindistance<<endl;
}

int main(){
    int v,e;
    cout<<"Enter the no of various departments(vertices) and links(edges)"<<endl;
    cin>>v>>e;

    Edge edges[e];

    // if no of vertices you entered is 5 then valid vertices are 0 , 1, 2, 3 & 4. So enter accordingly.
    cout<<"Enter the source department, destination department & distance between them (Ex: 0 1 5)"<<endl;

    int source, destination, distance;
    for( int i = 0; i < e; i++ ){
        cin>>source>>destination>>distance;

        edges[i].source = source;
        edges[i].destination = destination;
        edges[i].distance = distance;
    } 

    vector< vector<int> > matrix( v, vector<int>(v, INT_MAX));

    for( int i = 0; i < e; i++ ){
        matrix[ edges[i].source ][ edges[i].destination ] = edges[i].distance;
        matrix[ edges[i].destination ][ edges[i].source ] = edges[i].distance;
    }

    PrimsMst(matrix,v);
}