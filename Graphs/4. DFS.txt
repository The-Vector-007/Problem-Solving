void printDFS( int** adjMatrix, int n, int sv, bool* visited ){
    cout << sv << endl; // print the vertex
    visited[sv] = true; // mark it tre

    for( int i = 0; i < n; i++ ){
        if( i == sv ){ // 0-0 or 1-1 skip them
            continue;
        }
        if( adjMatrix[sv][i] == 1 ){ // check if an edge exists between sv, i
            if( visited[i] ){   // check if i is already visited or not. If yes then continue
                continue;
            }
            printDFS(adjMatrix, n, i, visited); // else call the func again with starting vertex i
        }
    }
}

int main(){
    int n; // 0 -- n-1 vertices
    int e; // no of edges
    cin >> n >> e;

    int** adjMatrix = new int*[n]; //array of pointers , each pointer will hold the adress of an array

    for( int i = 0; i < n; i++ ){
        adjMatrix[i] = new int[n];  // i th pointer holding the address of i th array
        for( int j = 0; j < n; j++ ){
            adjMatrix[i][j] = 0;    /// must be initialized with some value (garbage value is dangerous)
        }
    }

    bool* visited = new bool[n];

    for( int i = 0; i < n; i++ ){   // inititally all vertices are non-visited
        visited[i] = false;
    }

    for( int i = 0; i < e; i++ ){
        int s, e;               // edges will be inputed as staring vertex then ending vertex
        cin >> s >> e;

        adjMatrix[s][e] = 1;    //for the time being it is an undirected graph
        adjMatrix[e][s] = 1; 
    }

    int sv = 0; // the starting vertex from where printing should start , here we are taking 0th vertex

    printDFS(adjMatrix, n, sv, visited);

    for( int i = 0; i < n; i++ ){ // dynamically allocated memory must be freed.
        delete[] adjMatrix[i];
    }
    delete[] adjMatrix;
}

NOTE :-

When we decide to go in one direction then we move in that direction unless we can't move any further and then we move on to the next
direction.

So we are searching in a direction in depth unless we can't Search any further, so the name of this type of search is Depth First Search.

Time Complexity = O(V + E)

Data structure used = Stack.