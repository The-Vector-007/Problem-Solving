DFS :-

bool hasPath(int** adjMatrix, int n, int sv, int ev, bool* visited){
    
    if( sv == ev ){
        return true;
    }
    
    if( adjMatrix[sv][ev] == 1 ){
        return true;
    }

    visited[sv] = true;

    for( int i = 0; i < n; i++ ){
        if( i == sv ){
            continue;
        }
        if( adjMatrix[sv][i] == 1 ){
            if( visited[i] ){
                continue;
            }
            return hasPath(adjMatrix, n, i, ev, visited);
        }
    }

    return false;
}

BFS :-

bool hasPath(int **edge,int n,int s,int e){
    if(s==e)
        return true;
    bool *visited=new bool[n];
    for(int i=0;i<n;i++){
        visited[i]=false;
    }
    queue<int> q;
    q.push(s);
    visited[s]=true;
    while(q.size()){
        int a = q.front();
        q.pop();
        for(int i=0;i<n;i++){
            if(edge[a][i] && !visited[i]){
                if(i==e){   // only those vertices will be pushed who are having an edge and are not visited and if one of those
                return true; // is our end vertex then return true.
            }
                q.push(i);
                visited[i]=true;
            }
        }
    }
    // delete visited array
    delete [] visited;
    
    return false;
}