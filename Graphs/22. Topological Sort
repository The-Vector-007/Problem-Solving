Algorithm :-

We can modify DFS to find Topological Sorting of a graph. In DFS, we start from a vertex, we first print it and then recursively call 
DFS for its adjacent vertices. In topological sorting, we use a temporary stack. We donâ€™t print the vertex immediately, we first 
recursively call topological sorting for all its adjacent vertices, then push it to a stack. Finally, print contents of the stack. 
Note that a vertex is pushed to stack only when all of its adjacent vertices (and their adjacent vertices and so on) are already in 
the stack. 


Code :-

void topoSortHelper(int sv, vector< vector<int> >& adj, vector<bool>& visited, stack<int>& s){
    visited[sv] = true;

    for( int adjacent : adj[sv] ){
        if( !visited[adjacent] ){
            topoSortHelper(adjacent, adj, visited, s);
        }
    }

    s.push(sv);

}

vector<int> topoSort(int V, vector< vector<int> >& adj) {
	vector<bool> visited(V,false);

    stack<int> s;

    for( int i = 0; i < V; i++ ){
        if( !visited[i] ){
            topoSortHelper(i, adj, visited, s);
        }
    }

    vector<int> ans;

    while(!s.empty()){
        ans.push_back(s.top());
        s.pop();
    }

    return ans;
}