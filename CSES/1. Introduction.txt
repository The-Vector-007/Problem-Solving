1) COMPILATION : g++ -std=c++11 -O2 -Wall test.cpp -o test

g++ --> name of the compiler
-std = c++11 --> C++ 11 Standard
-Wall --> show warnings and possible errors
test.cpp --> source code
-o test --> binary file i.e output
-02 --> optimizes the code

2) INPUT & OUTPUT :-

ios::sync_with_stdio(0);
cin.tie(0);
Input and output is sometimes a bottleneck in the program. The above
lines at the beginning of the code make input and output more efficient.

Note that the newline "\n" works faster than endl, because endl always causes a flush operation.

The C functions scanf and printf are an alternative to the C++ standard
streams. They are usually a bit faster, but they are also more difficult to use.

scanf :-
int a, b;
scanf("%d %d", &a, &b);

printf :-
int a = 123, b = 456;
printf("%d %d\n", a, b);

Sometimes the program should read a whole line from the input, possibly
containing spaces. This can be accomplished by using the getline function:

string s;
getline(cin, s);

If the amount of data is unknown, the following loop is useful:

while (cin >> x) {
// code
}

This loop reads elements from the input one after another, until there is no more
data available in the input.

In some contest systems, files are used for input and output. An easy solution
for this is to write the code as usual using standard streams, but add the following
lines to the beginning of the code:

freopen("input.txt", "r", stdin);
freopen("output.txt", "w", stdout);

3) NUMBERS :-

 int --> 32-bit --> (−2^31) - (2^31 - 1) or ( -2.10^9 to 2.10^9 )
 long long  --> 64-bit --> (-2^63) to (2^63 - 1) or ( -9.10^18 to 9.10^18 )
 __int128_t --> 128-bit --> (-2^127) to (2^127 - 1) or ( -10^38 to 10^38 )// provided by g++ but not available in all contests.

Caution!! while using long long and int in the same code:-

int a = 123456789;
long long b = a*a;
cout << b << "\n"; // -1757895751

Even though the variable b is of type long long, both numbers in the expression a*a are of type int and the result is also 
of type int. Because of this, the variable b will contain a wrong result

Solution : The problem can be solved by changing the type of a to long long or by changing the expression to 
(long long)a*a.

4) MODULUS :-
Sometimes, the answer to a problem is a very large number but it is enough to output it ”modulo m”, i.e., the remainder
when the answer is divided by m (for example, ”modulo 1e9 + 7”). The idea is that even if the actual answer is very
large, it suffices to use the types int and long long.

(a+ b) mod m = (a mod m+ b mod m) mod m
(a− b) mod m = (a mod m− b mod m) mod m
(a· b) mod m = (a mod m· b mod m) mod m

Thus, we can take the remainder after every operation and the numbers will never become too large.

Usually we want the remainder to always be between 0...m−1. However, in
C++ and other languages, the remainder of a negative number is either zero or
negative. An easy way to make sure there are no negative remainders is to first
calculate the remainder as usual and then add m if the result is negative:

x = x%m;
if (x < 0) x += m;

However, this is only needed when there are subtractions in the code and the remainder may become negative.

5) FLOATING POINT NUMBERS :-

64-bit double & 80-bit long double.
In most cases double is enough, but long double is more accurate.

printing with precision : printf("%.9f\n", x); // upto 9 decimal places

double x = 0.3*3+0.1;
printf("%.20f\n", x); // 0.99999999999999988898 rounding error

It is risky to compare floating point numbers with the == operator, because it
is possible that the values should be equal but they are not because of precision
errors. A better way to compare floating point numbers is to assume that two
numbers are equal if the difference between them is less than ", where " is a
small number( 10^-9 ) .

if (abs(a-b) < 1e-9) {
// a and b are equal
}

7) SHORTENING CODE :-

Short code is ideal in competitive programming, because programs should be
written as fast as possible.

typedef old_name new_name;
e.g : typedef long long ll;
      typedef vector<int> vi;
      typedef pair<int,int> pi;

Macros : A macro means that certain strings in the code will be changed before the compilation.

#define new_name old_name;
e.g: 	#define F first
	#define S second
	#define PB push_back
	#define MP make_pair

A macro can also have parameters which makes it possible to shorten loops
and other structures.

eg: #define REP(i,a,b) for (int i = a; i <= b; i++)

CAUTION :-

Error : #define SQ(a) a*a
	cout << SQ(3+3) << "\n";
	cout << 3+3*3+3 << "\n"; // 15 (wrong)

Solution : #define SQ(a) (a)*(a)
	   cout << SQ(3+3) << "\n";
	   cout << (3+3)*(3+3) << "\n"; // 36

8) MATHEMATICS :-

sum( 1 to n ) x^k = 1^k + 2^k + ... + n^k
where k is a positive integer, has a closed-form formula that is a polynomial of
degree k+1.

sum( 1 to n ) x = 1 + 2 + ... + n = n(n+1)/2.
sum( 1 to n ) x^2 = 1^2 + 2^2 + ... + n^2 = n(n+1)(2n+1)/6.

Arithmetic Progression : a sequence of numbers where the difference
between any two consecutive numbers is constant.

sum of A.P : a + ... + b (n numbers) = n(a+b)/2

Geometric Progression : a sequence of numbers where the ratio between
any two consecutive numbers is constant.

sum of : a + ak + ak^2 + ... + b = (bk - a)/(k-1)

3 + 6 + 12 + 24 = (24 x 2 - 3)/(2-1) = 45

special case : 1 + 2 + 4 + 8 + ... + 2^(n-1) = 2^n - 1

Harmonic sum -- refer to book

Set theory :-

We can also construct a set using a rule of the form,
		{ f(n) : n belongs to S }
This set contains all elements of the form f (n),
where n is an element in S.

e.g : X = { 2n : n belongs to Z } i.e. set of even integers

Logic:-

operators :  !(negation), && (conjunction), || (disjunction), 
=> (implication) and <=>(equivalence) !(XOR)

A predicate is an expression that is true or false depending on its parameters.
Predicates are usually denoted by capital letters. For example, we can define
a predicate P(x) that is true exactly when x is a prime number. Using this
definition, P(7) is true but P(8) is false.

A quantifier connects a logical expression to the elements of a set. The most
important quantifiers are (ulta A) (for all) and (ulta E) (there is).

Functions :-

1) floor(x) --> down to an integer
2) ceil(x) -> up to an integer
3) min(a,b)
4) max(a,b)
5) factorial :-
(1 to n) x = 1.2.3...n
or
0! = 1
n! = n.(n-1)!

6) fibonacci series:-
f(0) = 0
f(1) = 1
f(n) = f(n-1) + f(n-2)

0,1,1,2,3,5,8,13,21,34,55,...

Binet's Formula for f(n) : ( ( 1 + sqrt(5) )^n - ( 1 - sqrt(5) )^n )/ 2^n . sqrt(5)

Logarithms :-

logarithm of a number x --> log(base k)(x), where k is the base of logarithm.
log(base k)(x) = a equivalent to k^a = x .

A useful property of logarithm is that log(base k)(x) equals the number of times we
have to divide x by k before we reach 1.
e.g: log(base 2)(32) = 5.
32->16->8->4->2->1

log(base u)(x) = log(base k)(x) / log(base k)(u)
ln(base e)(x) --> e = 2.71828..

number of digits of an integer x in base b is [ log(base b)(x) + 1 ]
e.g: binary representation of 123 requires [ log(base 2)(123) + 1 ] = 7 --> 1111011




