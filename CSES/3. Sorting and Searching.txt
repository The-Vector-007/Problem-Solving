Sorting :-

1) Inversions: A useful concept when analyzing sorting algorithms
is an inversion: a pair of array elements (array[a],array[b]) 
such that a < b and (array[a] > array[b]), i.e., the elements are 
in the wrong order.

e.g: 1, 2, 2, 6, 3, 5, 9, 8.

The above array has 3 inversions. (6,3), (6,5) & (9,8).

The number of inversions indicates how much work is needed to 
sort the array. An array is completely sorted when there are no 
inversions. On the other hand, if the array elements are in the
reverse order, the number of inversions is the largest possible:

1 + 2 + 3 + ... + (n-1) = n(n-1)/2 = O(n^2).

Swapping a pair of consecutive elements that are in the wrong 
order removes exactly one inversion from the array. Hence, if a 
sorting algorithm can only swap consecutive elements, each swap 
removes at most one inversion, and the time complexity of the 
algorithm is at least O(n^2).

2) Counting sort is a very efficient algorithm but it can only be
used when the constant c is small enough, so that the array 
elements can be used as indices in the bookkeeping array.

3)Inbuilt sort funcitons:-
(i) vector<int> v = {4,2,5,3,5,2};

sort( v.begin(), v.end() ); // increasing
sort( v.rbegin(), v.rend() ); // decreasing

(ii)int n = 7; // array size
int a[] = {4,2,5,3,5,8,3};

sort(a,a+n);

(iii) string s = "monkey";

sort(s.begin(), s.end());

4) Comparison operators:-

The function sort requires that a comparison operator is defined for the data
type of the elements to be sorted. When sorting, this operator will be used
whenever it is necessary to find out the order of two elements.

Most C++ data types have a built-in comparison operator, and elements
of those types can be sorted automatically. For example, numbers are sorted
according to their values and strings are sorted in alphabetical order.

Pairs (pair) are sorted primarily according to their first elements (first).
However, if the first elements of two pairs are equal, they are sorted according to
their second elements (second):

vector<pair<int,int>> v;
v.push_back({1,5});
v.push_back({2,3});
v.push_back({1,2});
sort(v.begin(), v.end());

After this, the order of the pairs is (1,2), (1,5) and (2,3).

Similarly for tuples,

vector<tuple<int,int,int>> v;
v.push_back({2,1,4});// or v.push_back( make_tuple(2,1,4) );
v.push_back({1,5,3});
v.push_back({2,1,3});
sort(v.begin(), v.end());
After this, the order of the tuples is (1,5,3), (2,1,3) and (2,1,4).

for user defined structs,

struct P {
	int x, y;
	bool operator<(const P &p) {
	if (x != p.x) return x < p.x;
	else return y < p.y;
	}
};

User-defined structs do not have a comparison operator automatically. The
operator should be defined inside the struct as a function operator<, whose
parameter is another element of the same type. The operator should return true
if the element is smaller than the parameter, and false otherwise.

Imp : Comparison functions :-

It is also possible to give an external comparison function to the sort function
as a callback function. For example, the following comparison function comp sorts
strings primarily by length and secondarily by alphabetical order:

bool comp(string a, string b) {
if (a.size() != b.size()) return a.size() < b.size();
return a < b;
}

sort(v.begin(), v.end(), comp);

5) Binary search implementation :-

Method 1 :

int a = 0, b = n-1;
while (a <= b) {
int k = (a+b)/2;
if (array[k] == x) {
// x found at index k
}
if (array[k] > x) b = k-1;
else a = k+1;
}

Method 2:

int k = 0;
for (int b = n/2; b >= 1; b /= 2) {
while (k+b < n && array[k+b] <= x) k += b;
}
if (array[k] == x) {
// x found at index k
}

Method 3 :

Imp : array must be sorted.

• lower_bound returns a pointer to the first array element whose value is at
least x.
• upper_bound returns a pointer to the first array element whose value is
larger than x.
• equal_range returns both above pointers.

if nothing found it returns a pointer which points to the 
element after the last array element.

examples :-

(1) 
auto k = lower_bound(array,array+n,x)-array;
if (k < n && array[k] == x) {
// x found at index k
}

(2) counts the number of elements whose value is x:
auto a = lower_bound(array, array+n, x);
auto b = upper_bound(array, array+n, x);
cout << b-a << "\n";

(3) the above code becomes shorter this way.
auto r = equal_range(array, array+n, x);
cout << r.second-r.first << "\n";

Applications :-
(1) Finding the smallest solution.
(2) Finding the maximum value.

consecutive values must not be equal.