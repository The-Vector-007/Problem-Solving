1. Recursive Solution :-

int lcs(int x, int y, string s1, string s2){
    
    if( x == 0 || y == 0 )
        return 0;
        
    else{
        if( s1[x-1] == s2[y-1] )
            return( 1 + lcs(x-1, y-1, s1, s2) );
        else
            return max( lcs(x-1, y ,s1, s2), lcs( x, y-1, s1, s2 ) );
    }
    
}

2. Memoization :-

int dp[n+1][m+1];

int lcs(int x, int y, string s1, string s2){
    
    if( x == 0 || y == 0 )
        return 0;
    if( dp[x][y] != -1 )
	return dp[x][y];
        
    else{
        if( s1[x-1] == s2[y-1] )
            return dp[x][y] = ( 1 + lcs(x-1, y-1, s1, s2) );
        else
            return dp[x][y] = max( lcs(x-1, y ,s1, s2), lcs( x, y-1, s1, s2 ) );
    }
    
}

int main(){

	memset(dp , -1, sizeof(dp) );
	string s1,s2;
	cin>>s1>>s2;
	cout<<lcs(s1.size(), s2.size(), s1, s2)<<endl;
}

3. Top-Down DP :-

int lcs( int x, int y, string s1, string s2 ){

    int t[x+1][y+1];

    for( int i = 0; i < x+1; i++ ){
        for( int j = 0; j < y+1; j++ ){
            if( i == 0 || j == 0 )
                t[i][j] = 0;
            else{
                if( s1[i-1] == s2[j-1] )
                    t[i][j] = 1 + t[i-1][j-1];
                else
                    t[i][j] = max( t[i-1][j], t[i][j-1] );
            }
        }
    }

    return t[x][y];
}

4. Printing LCS :-

void printLcs( int x, int y, string s1, string s2 ){

    int t[x+1][y+1];

    for( int i = 0; i < x+1; i++ ){
        for( int j = 0; j < y+1; j++ ){
            if( i == 0 || j == 0 )
                t[i][j] = 0;
            else{
                if( s1[i-1] == s2[j-1] )
                    t[i][j] = 1 + t[i-1][j-1];
                else
                    t[i][j] = max( t[i][j-1], t[i-1][j] );
            }
        }
    }

    // This is called Backtracking!
    int i = x, j = y;
    string ans = "";

    while( i > 0 && j > 0 ){
        if( s1[i-1] == s2[j-1] ){
            ans.push_back( s1[i-1] );
            i--;
            j--;
        }
        else{
            if( t[i][j-1] > t[i-1][j] ){
                j--;
            }
            else{
                i--;
            }
        }
    }

    reverse( ans.begin(), ans.end() );

    cout<<ans<<endl;
}