Convex Hull : Given a set of points in the plane. the convex hull of the set is the smallest convex polygon that contains all the points of it.

Algorithm to find convex hull : Jarvis March ( O(n^2) )

Code :-

#include<bits/stdc++.h>
using namespace std;

struct Point{
    int x, y;
};

bool to_change(Point p, Point q, Point r){
    int x1 = q.x - p.x;
    int y1 = q.y - p.y;
    int x2 = r.x - q.x;
    int y2 = r.y - q.y;

    int val = x1*y2 - x2*y1;

    return val > 0;
}

vector<Point> ConvexHull(Point points[], int n){
    vector<Point> hull;
    int left = 0;

    for( int i = 1; i < n; i++ ){
        if( points[i].x < points[left].x ){
            left = i;
        }
    }

    int p = left; // left contains index of leftmost point

    do{
        hull.push_back(points[p]);
        int q = (p+1)%n; // will behave like circular array

        for( int i = 0; i < n; i++ ){
            if( to_change(points[p], points[q], points[i]) ){ //finding the point which is the most counterclockwise
                q = i;
            }
        }

        p = q;

    }while(p!=left);

    return hull;
}

int main(){
    Point points[] = { {4,0}, {0,4}, {4,4}, {0,0}, {1,2}, { 3,3}, {3,4} };
    int n = 7;
    vector<Point> hull = ConvexHull(points,n);

    for( int i = 0; i < hull.size(); i++ ){
        cout << hull[i].x << "," << hull[i].y << endl;
    }
}