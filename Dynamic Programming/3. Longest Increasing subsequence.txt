//O(n^2)
int LIS(int * input, int n){
    int arr[n];
    arr[0] = 1;

    for( int i = 1; i < n; i++ ){
        arr[i] = 1;
        for( int j = i-1; j >= 0; j-- ){
            if( input[j] < input[i] ){
                arr[i] = max(arr[i], arr[j] + 1);
            }
        }
    }

    int ans = 0;
    for( int i = 0; i < n; i++ ){
        if( arr[i] > ans ){
            ans = arr[i];
        }
    }

    return ans;
}

//O(nlogn)
int LIS2(int arr[], int n){
    vector<int> seq;
    seq.push_back(arr[0]);
    
    for(int i = 1; i < n; i++){

        if(arr[i] > seq.back()){
            seq.push_back(arr[i]);
        }
        else{
            int index = lower_bound(seq.begin() , seq.end() , arr[i])-seq.begin();
            seq[index] = arr[i];
        }

    }

    return seq.size();
}

NOTE : The nlogn approach will give the correct answer if we want the size of LIS but if we want a correct LIS itself then the above
method will not work.
