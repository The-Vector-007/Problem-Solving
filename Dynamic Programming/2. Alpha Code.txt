//Bottom Up approach
long long AlphaCode(string s, int size){
    long long arr[size+1] = {0};
    arr[0] = 1;
    arr[1] = 1;

    for(int i = 2; i <= size; i++){

        if( (s[i-1] - '0') != 0 ){
            arr[i] = arr[i-1];
        }
        
        if( (s[i-2] - '0') * 10 + (s[i-1] - '0') <= 26 && s[i-2] - '0' != 0 ){
            arr[i] += arr[i-2];
        }

    }

    return arr[size];
}

//Top Down approach
long long AlphaCode2(string s, int size, long long * arr){
    if( size == 0 || size == 1 ){
        return 1;
    }

    if( arr[size] > 0 ){
        return arr[size];
    }

    long long output = 0;

    if( s[size-1] != '0' ){
        output = AlphaCode2(s,size-1,arr);
    }

    if( (s[size-2] - '0') * 10 + (s[size-1] - '0') <= 26 && s[size - 2] != '0' ){
        output += AlphaCode2(s,size-2,arr);
    }

    arr[size] = output;

    return output;
}