//1, 1, 2, 3

//Normal Fibonacci -- Takes Exponential Time
int fib1(int n){
    if(n == 0 || n == 1)
        return 1;

    return fib1(n-1) + fib1(n-2);
}

//Top-Down DP solution - Breaking large problem into subproblems and storing the results(Memoization)
// Takes Linear Time
int fib2(int n, int * arr){ // all array values will be zero initially, arr[n+1]
    if(n == 0 || n == 1)
        return 1;

    if(arr[n] > 0){ // arr[i] = 0 marks the result is not found ye
        return arr[n];
    }

    int output = fib2(n-1, arr) + fib2(n-2, arr);
    arr[n] = output;

    return output;
}

//Bottom-UP approach -- we have solution to small problems using that we will build the whole solution
//Takes Linear Time
int fib3(int n){
    int arr[n+1];

    arr[0] = 1;
    arr[1] = 1;

    for(int i = 2; i <= n; i++){
        arr[i] = arr[i-1] + arr[i-2];
    }

    return arr[n];
}