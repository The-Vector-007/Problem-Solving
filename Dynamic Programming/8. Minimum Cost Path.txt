Problem Note : down , right or diagonal -- only these three moves


(1) Recursive + Memoization ( Top Down DP ) :-

int min_cost_helper(vector<vector<int>>& input,vector<vector<int>>& dp ,int si, int sj, int ei, int ej){
    if( si == ei && sj == ej ){
        return input[si][sj];
    }

    if( si > ei || sj > ej ){
        return INT_MAX;
    }

    if( dp[si][sj] > -1 ){
        return dp[si][sj];
    }

    int op1 = min_cost_helper(input,dp,si+1,sj,ei,ej);
    int op2 = min_cost_helper(input,dp,si+1,sj+1,ei,ej);
    int op3 = min_cost_helper(input,dp,si,sj+1,ei,ej);

    return dp[si][sj] = input[si][sj] + min(op1, min(op2,op3));
}

void min_cost(){
    vector<vector<int>> input = {
        {9,4,9,9},
        {6,7,6,4},
        {8,3,3,7},
        {7,4,9,10}
    };

    int n = input.size(), m = input[0].size();

    vector<vector<int>>dp(n, vector<int>(m, -1));

    cout << min_cost_helper(input,dp,0,0,n-1,m-1) << endl;
}

(2) Bottom-up Approach :-

int min_cost2(vector<vector<int>>& input, int n, int m){
    vector<vector<int> > dp(n,vector<int>(m,0));

    dp[n-1][m-1] = input[n-1][m-1];

    for( int i = n-2; i >= 0; i-- ){    //fil last column
        dp[i][m-1] = input[i][m-1] + dp[i+1][m-1];
    }

    for( int i = m-2; i >= 0; i-- ){    // fill last row
        dp[n-1][i] = input[n-1][i] + dp[n-1][i+1];
    }

    for( int i = n-2; i >= 0; i-- ){    // keep filling from (n-2,m-2) to (0,0)
        for( int j = m-2; j >= 0; j-- ){
            dp[i][j] = input[i][j] + min( dp[i+1][j], min( dp[i+1][j+1], dp[i][j+1] ) );
        } 
    }

    return dp[0][0];
}