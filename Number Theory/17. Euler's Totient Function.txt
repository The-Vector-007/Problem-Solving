Definition :-

Φ(n) = No of 'm' such that gcd(n,m) = 1 i.e. n and m are coprime such that 1<= m < n & n >= 1

E.g :-

Φ(1) = 1 | 1
Φ(2) = 1 | 1
Φ(3) = 2 | 1,2
Φ(4) = 2 | 1,3
Φ(5) = 4 | 1,2,3,4

Important Property :-

Φ( a x b )      =       Φ(a)    x   Φ(b)    , gcd(a,b) = 1 

Finding the value of Φ(n) :-

Let k be the no of distinct prime numbers which divides n ( or distinct prime factors of n ). Then,

We can write any number n as,

                            n = p1^a x p2^b x p3^c x ... x pk^i , where a,b,c,i = some power and p1,p2,p3,pk = prime factors of no

Therefore,
                    Φ(n) = Φ( p1^a x p2^b x p3^c x ... x pk^i )
                         
                         = Φ(p1^a) x Φ(p2^b) x Φ(p3^c) x ... x Φ(pk^i)  { Using Property & gcd(2,3) = 1 also gcd(2^a,3^b) = 1 a,b = any no }

{
        Φ(p1^a) = Total Numbers - Numers which are not coprime with p1^a = p1^a - p1^a/p1 = p1^a( 1 - 1/p1 ) 

        Reason : In 1 ...... p1^a only the multiples of p1 will not be coprime with p1^a
        So,
            p1 * k <= p1^a => k = p1^a / p1
}

                         = p1^a(1 - 1/p1) x p2^b(1 - 1/p2) x p3^c(1 - 1/p3) x ... x pk^i(1 - 1/pk) 

                         = (p1^a x p2^b x p3^c x ... x pk^i) x ( (1 - 1/p1) x (1 - 1/p2) x (1 - 1/p3) x ... x (1 - 1/pk) )

                    Φ(n) = n x (1 - 1/p1) x (1 - 1/p2) x (1 - 1/p3) x ... x (1 - 1/pk) where k = distinct prime factors of n.
                                                                ^
                                                                |                                                            
                                                                |
                                                                ------ Remember

E.g :-

    Φ(10) = 4 | 1,3,7,9

    Using above formula,

                        10 = 2^1 x 5^1

            Therefore,  Φ(10) = 10 x (1-1/2) x (1-1/5) = 10 x 1/2 x 4/5 = 4 

Algorithm :-

(1) Create an array of size N + 1 [0,N] and initialize it as : arr[i] = i.
(2) Iterate from 2 to N and check if arr[i] == i then,
        - arr[i] = i-1
        - Multiply all the multiples of i with (1 - 1/i)
(3) phi(i) will give the euler's totient value for i.

Code :-

void EulersTotient(int n){
    //Step 1
    int phi[n+1];   // make it global as per requirement
    for( int i = 0; i <= n; i++ ){
        phi[i] = i;
    }

    //Step 2
    for( int i = 2; i <= n; i++ ){
        if( phi[i] == i ){
            phi[i] = i - 1;
            for( int j = 2*i; j <= n; j += i ){
                phi[j] = (phi[j] * ( i-1 )) / i;
            }
        }
    }

}

Time Complexity : Same as sieve i.e. N log( log (N) )