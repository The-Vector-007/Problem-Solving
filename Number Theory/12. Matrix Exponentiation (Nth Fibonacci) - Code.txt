/*
    A = {
        {a,b},
        {c,d}
    };
*/
void matrixMultiplication(int A[2][2], int B[2][2]){
    int a = A[0][0]*B[0][0] + A[0][1]*B[1][0];
    int b = A[0][0]*B[0][1] + A[0][1]*B[1][1];
    int c = A[1][0]*B[0][0] + A[1][1]*B[1][0];
    int d = A[1][0]*B[0][1] + A[1][1]*B[1][1];

    A[0][0] = a;
    A[0][1] = b;
    A[1][0] = c;
    A[1][1] = d;
}

void matrixExponentiation(int M[2][2], int n){
    if( n == 0 || n == 1 )
        return;

    matrixExponentiation(M, n/2);

    matrixMultiplication(M,M);

    if( n % 2 != 0 ){
        int tempM[2][2] = {
            {1, 1},
            {1, 0}
        };
        matrixMultiplication(M,tempM);
    }
}

// 0th - 0, 1st - 1, 2nd - 1, 3rd - 2 ...
int nthFibonacci( int n ){
    if( n == 0 )
        return 0;

    int M[2][2] = {
        { 1, 1 },
        { 1, 0 }
    };

    matrixExponentiation(M, n-1);

    return M[0][0];
}