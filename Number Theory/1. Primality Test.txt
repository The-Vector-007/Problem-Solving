(1) Check Prime ( O( n * sqrt(n) ) ) :-

For a number n to be prime, it must have two factors: 1 and n.

Now to count the number of factors, instead of iterating from i = 1 to n and dividing n/i, We can iterate from i = 1 to sqrt(n) and 
can find factors as, if n % i == 0 then first factor = i, second factor n/i;

Caution : i * i == n , in this case there will be only one factor.

Code :-

bool checkPrime( int n ){
    int cnt = 0;

    for( int i = 1; i*i <= n; i++ ){
        if( n % i == 0 ){
            if( i*i == n ){
                cnt += 1;   // 5 * 5 = 25 only 1 factor
            }
            else{
                cnt += 2;   // 12 % 3 == 0 --> 3 , 12/3 = 4 two factors
            }
        }
    }

    if( cnt == 2 ){
        return true;
    } 

    return false;
}

Logic behind this approach :-

                                    n   =   a   *   b

Here, a and b can have maximum value of sqrt(n),
    if a > sqrt(n) then b < sqrt(n)
    if a < sqrt(n) then b > sqrt(n)
    if a == sqrt(n) then b == sqrt(n)

In any case one factor lies under sqrt(n).

(2) Sieve of Eratosthenes :-

Finding prime numbers till N.

Algorithm :-

(1) Make a boolean array of size N+1, and mark all values true initially.
(2) Mark 0 and 1 False.
(3) Iterate from p = 2 to p = sqrt(N)
        For each p if array[p] is true , start iterating from i = p*p to i = N , incrementing i by p and mark array[i] = false.
(4) All the values in the array marked true are prime numbers.

Note :-

Optimization 1 : For each prime number p start marking from p*p.

e.g. for p = 3  multiples : 3 * 1 = 3, 3 * 2 = 6, 3 * 3 = 9

but 3 * 2 is already covered by 2 * 3 . So start from 3 * 3 i.e p * p.

Similary for p = 5, 5*2 is covered by 2*5, 5*3 is covered by 3*5, 5*4 is covered by 5*2*2 = 2 * 10. so start from 5 * 5 i.e again p*p.

Optimization 2 : Iterate p till sqrt(N), because (sqrt(N) + 1) * (sqrt(N) + 1) will be out of range of array.

e.g. prime numbers till N = 100. 

iterate p till sqrt(100) = 10, as 11 * 11 = 121 which is out of range.

Code :-

int n;
vector<bool> isPrime(n+1, true);

void makeSieve( int n ){
    isPrime[0] = false;
    isPrime[1] = false;

    for( int p = 2; p*p <= n; p++ ){
        if( isPrime[p] ){
            for( int i = p*p; i <= n; i += p ){
                isPrime[i] = false;
            } 
        }
    }

}

Time Complexity :-

outer loop - 2 to sqrt(N)

inner loop works only for those N which are primes and they work for N/p times.

E.g 

for p = 2 , inner loop will work for => 2 * k = N => k = N/2 ( say N = 10, 2 * 1, 2 * 2, 2 * 3, 2 * 4, 2 * 5 or 10/2 = 5 times ).
for p = 3 , inner loop will work for => 3 * k = N => k = N/3
for p = 5 , inner loop will work for => 5 * k = N => k = N/5

So N/p times.

now,

Time complexity = N/2 + N/3 + N/5 + N/7 + N/11 + ... + N/sqrt(N)
                = N ( 1/2 + 1/3 + 1/7 + 1/11 + ... )
                = N * log( log N^(1/2) ) //Sum found by Meridians Theorem
                = N * log( 1/2 * log N )
                = O( N * log( log N ) ).

NOTE :-

(1) 2 is the only even prime number, all other prime numbers are odd.