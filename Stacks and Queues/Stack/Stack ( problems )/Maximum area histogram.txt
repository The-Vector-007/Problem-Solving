vector<int> NSL( long long arr[], int n ){
    vector< int > ans;
    stack< pair< long long, int > > s;
    for( int i = 0; i < n; i++ ){
        if( s.empty() ){
            ans.push_back(-1);
        }
        else if( !s.empty() && s.top().first < arr[i] ){
            ans.push_back( s.top().second );
        }
        else if( !s.empty() && s.top().first >= arr[i] ){
            while( !s.empty() && s.top().first >= arr[i] ){
                s.pop();
            }
            if(s.empty()){
                ans.push_back(-1);
            }
            else{
                ans.push_back( s.top().second );
            }
        }
        s.push( make_pair( arr[i], i ) );
    }
    return ans;
}

vector<int> NSR( long long arr[], int n ){
    vector< int > ans;
    stack< pair< long long, int > > s;
    for( int i = n-1; i >= 0 ; i-- ){
        if( s.empty() ){
            ans.push_back(n);
        }
        else if( !s.empty() && s.top().first < arr[i] ){
            ans.push_back( s.top().second );
        }
        else if( !s.empty() && s.top().first >= arr[i] ){
            while( !s.empty() && s.top().first >= arr[i] ){
                s.pop();
            }
            if(s.empty()){
                ans.push_back(n);
            }
            else{
                ans.push_back( s.top().second );
            }
        }
        s.push( make_pair( arr[i], i ) );
    }
    reverse(ans.begin(), ans.end());
    return ans;
}

long long getMaxArea(long long arr[], int n){
    
    // Your code here
    vector<int> left = NSL(arr,n);
    vector<int> right = NSR(arr,n);
    
    long long max = INT_MIN;
    for( int i = 0; i < n; i++ ){
        long long ans = (right[i] - left[i] - 1) * arr[i];
        if( ans > max ){
            max = ans;
        }
    }
    
    return max;
    
}