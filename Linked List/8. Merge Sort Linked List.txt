Node * middleOfLL( Node * head ){
    Node * slow = head;
    Node * fast = head->next;

    while( true ){
        if( fast == NULL || fast->next == NULL ){
            break;
        }
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

Node * mergeTwoSortedLL( Node * h1, Node * h2 ){
    Node * fh = NULL;
    Node * ft = NULL;

    if( h1->data < h2->data ){
        fh = h1;
        ft = h1;
        h1 = h1->next;
    }
    else{
        fh = h2;
        ft = h2;
        h2 = h2->next;
    }

    while( h1 != NULL && h2 != NULL ){

        if( h1->data < h2->data ){
            ft->next = h1;
            ft = ft->next;
            h1 = h1 -> next;
        }
        else{
            ft->next = h2;
            ft = ft -> next;
            h2 = h2 -> next;
        }

    }

    if( h1 == NULL ){
        ft->next = h2;
    }

    if( h2 == NULL ){
        ft->next = h1;
    }

    return fh;
}

void  MergeSort( Node** h ){

    Node * head = *h;
    Node * a;
    Node * b;
    
    if( head == NULL || head->next == NULL ){
        return ;
    }

    a = head;
    b = middleOfLL(head);
    Node * temp = b;
    b = b->next;
    temp->next = NULL;

    MergeSort(&a);
    MergeSort(&b);

    *h = mergeTwoSortedLL(a,b);
}