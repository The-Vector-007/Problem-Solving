(1) Check if a tree is BST :-

int maximum( BinaryTreeNode<int>* root ){
    if( root == NULL ){
        return INT_MIN;
    }
    return max( root->data , max( maximum(root->left), maximum(root->right) ) );
}

int minimum( BinaryTreeNode<int>* root ){
    if( root == NULL ){
        return INT_MAX;
    }
    return min( root->data, min( minimum(root->left), minimum( root->right ) ) );
}

bool isBst( BinaryTreeNode<int>* root ){
    if( root == NULL ){
        return true;
    }
    int leftMax = maximum(root->left);
    int righMin = minimum(root->right);
    bool output = ( root->data > leftMax ) && ( root->data <= righMin ) && isBst(root->left) && isBst(root->right);
    return output;
}

Time Complexity -- O( n * h )  // n = no. of nodes , h = height of tree equivalent to O(n^2).

for fully balanced tree -- O( n * log(n) ) // log(n) -- height of balanced tree
for fully unbalanced tree -- O( n * n ) // n - height of unbalanced tree   

(2) Check if a Tree is Bst Efficient Method :-

pair< bool, pair<int,int> > isBstEfficient( BinaryTreeNode<int>* root ){ // second.first = max, second.second = min
    if( root == NULL ){
        pair< bool, pair<int,int> > p;
        p.first = true;
        p.second.first = INT_MIN;
        p.second.second = INT_MAX;
        return p; 
    }

    pair< bool , pair<int,int> > leftOutput = isBstEfficient(root->left);
    pair< bool , pair<int,int> > rightOutput = isBstEfficient(root->right);

    int minimum = min( root->data, min( leftOutput.second.second, rightOutput.second.second ) );
    int maximum = max( root->data, max( leftOutput.second.first, rightOutput.second.first ) );
    int isBstFinal = ( root->data > leftOutput.second.first ) && ( root->data <= rightOutput.second.second ) && leftOutput.first && rightOutput.first;
    pair<bool , pair<int,int> > ans;
    ans.first = isBstFinal;
    ans.second.first = maximum;
    ans.second.second = minimum;
    return ans;
}

Time Complexity -- O(n) // for any type of tree. ( we are retrieving every reqd. info in one go )

(3) Check if a Tree is Bst Top Down :-

bool isBstTopDown( BinaryTreeNode<int>* root, int min = INT_MIN, int max = INT_MAX ){
    if( root == NULL ){
        return true;
    }
    if( root->data < min || root->data > max ){
        return false;
    }

    bool isLeftOk = isBstTopDown(root->left, min, root->data - 1);
    bool isRightOk = isBstTopDown(root->right, root->data, max);

    return isLeftOk && isRightOk;
}