#include<iostream>
using namespace std;

template <typename T>
class BinaryTreeNode{
    public: 
        T data;
        BinaryTreeNode<T>* left;
        BinaryTreeNode<T>* right;

    BinaryTreeNode(T data){
        this->data = data;
        left = NULL;
        right = NULL;
    }

    ~BinaryTreeNode(){
        delete left;
        delete right;
    }
};

class BST{

    private:

        BinaryTreeNode<int>* root;

        bool hasData( int data,BinaryTreeNode<int>* node ){
            if( node == NULL ){
                return false;
            }

            if( data == node->data ){
                return true;
            }
            else if( data < node->data ){
                return hasData(data, node->left);
            }
            else{
                return hasData(data, node->right);
            }
        }

        BinaryTreeNode<int>* insertData(int data, BinaryTreeNode<int>* node){
            if( node == NULL ){
                BinaryTreeNode<int>* newNode = new BinaryTreeNode<int>(data);
                return newNode;
            }

            if( data < node->data ){
                node->left = insertData(data, node->left);
            }
            else{
                node->right = insertData(data, node->right);
            }

            return node;
        }

        BinaryTreeNode<int>* deleteData( int data, BinaryTreeNode<int>* node ){
            if( node == NULL ){
                return NULL;
            }

            if( data < node->data ){
                node->left = deleteData(data, node->left);
                return node;
            }
            else if( data > node->data ){
                node->right = deleteData(data, node->right);
                return node;
            }
            else{
                if( node->left == NULL && node->right == NULL ){
                    delete node;
                    return NULL;
                }
                else if( node->left == NULL ){
                    BinaryTreeNode<int>* temp = node->right;
                    node->right = NULL;
                    delete node;
                    return temp;
                }
                else if( node->right == NULL ){
                    BinaryTreeNode<int>* temp = node->left;
                    node->left = NULL;
                    delete node;
                    return temp;
                }
                else{
                    BinaryTreeNode<int>* minNode = node->right;

                    while( minNode->left != NULL ){
                        minNode = minNode->left;
                    }

                    int rightMin = minNode->data;
                    node->data = rightMin;
                    node->right = deleteData(rightMin, node->right);
                    return node;
                }
            }
        }

        void printTree( BinaryTreeNode<int>* root ){
            if( root == NULL ){
                return;
            }

            queue<BinaryTreeNode<int>*> pendingNodes;
            pendingNodes.push(root);

            while(!pendingNodes.empty()){
                BinaryTreeNode<int>* front = pendingNodes.front();
                pendingNodes.pop();

                cout << front->data << " : ";

                if( front->left != NULL ){
                    cout << "L - " << front->left->data;
                    pendingNodes.push(front->left);
                }

                if( front->right != NULL ){
                    cout << ", R - " << front->right->data;
                    pendingNodes.push(front->right);
                }

                cout << endl;
            }
        }

    public:

        BST(){
            root = NULL;
        }

        ~BST(){
            delete root;
        }

        void deleteData( int data ){
            this->root = deleteData( data, this->root );
        }

        void insertData( int data ){
            this->root = insertData( data, this->root );
        }

        void printTree(){
            printTree(root);
        }

        bool hasData( int data ){
            return hasData(data, root);
        }
};